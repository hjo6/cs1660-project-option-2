/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.app;

import java.io.*;

import com.google.api.gax.longrunning.OperationFuture;
import static java.nio.charset.StandardCharsets.UTF_8;
import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.dataproc.v1.*;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.Blob;
import com.google.common.collect.Lists;

/**
 *
 * @author hunterosterhoudt
 */
public class projectUI extends javax.swing.JFrame {

    // Have to get credential json file from GCP IAM. Once downloaded, put its
    // location in this string
    String credentials = "/app/option2gui-5165b0dc8128.json";
    
    // The name of the cluster you want to submit the job to
    String clusterName = "final-project";
    
    // The project id of the GCP project
    String projectId = "option2gui";
    
    // Region where the cluster is located
    String region = "us-east1";
    
    // The name of the bucket where jar file and arg files are located
    String bucketName = "dataproc-staging-us-east1-284206552440-wehqqljx";
    
    // set your end point using the region variable
    String endpoint = String.format("%s-dataproc.googleapis.com:443", region);
    
    /**
     * Creates new form projectUI
     */
    public projectUI() {
        initComponents();
        jPanel1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        topNText = new javax.swing.JTextField();
        topNButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        searchLabel = new javax.swing.JLabel();
        topNlabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        engineName = new javax.swing.JLabel();
        title1 = new javax.swing.JLabel();
        title2 = new javax.swing.JLabel();
        invertIndicesBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchButton.setText("Submit");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        topNButton.setText("Submit");
        topNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topNButtonActionPerformed(evt);
            }
        });

        result.setColumns(20);
        result.setRows(5);
        jScrollPane2.setViewportView(result);

        searchLabel.setText("Search for a term");

        topNlabel.setText("Top N Results");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addGap(376, 376, 376)
                        .addComponent(topNlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)
                        .addGap(243, 243, 243)
                        .addComponent(topNText, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(topNButton)))
                .addContainerGap(92, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLabel)
                    .addComponent(topNlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topNText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topNButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );

        engineName.setText("hjo6 Search Engine");

        title1.setFont(new java.awt.Font("AppleGothic", 0, 24)); // NOI18N
        title1.setText("Click the Construct Inverted Indices");

        title2.setFont(new java.awt.Font("AppleGothic", 0, 24)); // NOI18N
        title2.setText("button below to begin");

        invertIndicesBtn.setText("Construct Inverted Indices");
        invertIndicesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertIndicesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(engineName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(invertIndicesBtn)
                    .addComponent(title1)
                    .addComponent(title2))
                .addGap(210, 210, 210))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(engineName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(title1)
                .addGap(0, 0, 0)
                .addComponent(title2)
                .addGap(18, 18, 18)
                .addComponent(invertIndicesBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void invertIndicesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertIndicesBtnActionPerformed
        // TODO add your handling code here:
        try {

            // This authenticates the credentials, then you can use this
            // variable for all credential authentications
            GoogleCredentials googleCreds = GoogleCredentials.fromStream(
                new FileInputStream(credentials))
            .createScoped(Lists.newArrayList("https://www.googleapis.com/auth/cloud-platform"));

            // Verify that credentials were accepted
            //System.out.println("Google Credentials set!");

            // This authenticates your credentials to use storage. Storage is
            // used to access any files stored in the bucket in the cluster
            Storage storage = StorageOptions.newBuilder()
            .setCredentials(googleCreds)
            .build()
            .getService();

            // Verify that storage credentials were accepted
            //System.out.println("Storage Credentials accepted!");

            // Configure JobControllerSettings to customize credentials. This
            // allows you to access the cluster
            JobControllerSettings jobControllerSettings = JobControllerSettings
            .newBuilder()
            .setEndpoint(endpoint)
            .setCredentialsProvider(FixedCredentialsProvider.create(googleCreds))
            .build();

            // Verify that job controller settings credentials were accepted
            System.out.println("Job Controller Settings Credentials accepted!");

            // Create the JobControllerClient with the previously set
            // jobControllerSettings
            JobControllerClient jobControllerClient = JobControllerClient
            .create(jobControllerSettings);

            // Configure the cluster placement for the job. clusterName is
            // the name of the cluster you are accessing
            JobPlacement jobPlacement = JobPlacement.newBuilder()
            .setClusterName(clusterName)
            .build();

            // Delete output directory if it already exists
            if (storage.get(BlobId.of(bucketName, "testInvertedIndex/output/")) != null) {
                // Get all of the blobs with this prefix
                Iterable<Blob> blobs = storage.list(bucketName, Storage.BlobListOption.prefix("testInvertedIndex/output/")).iterateAll();

                // For all blobs, delete the blob and print if deletion was successful
                for (Blob blob : blobs) {
                    boolean deleted = storage.delete(blob.getBlobId());
                    if (deleted) {
                        System.out.println("Blob successfully deleted!");
                    } else {
                        System.out.println("Error deleting blob.");
                    }
                }
            }

            // Configure the Hadoop Job settings. This is to specify the job
            // type and where you will set your main class, add a jar file to
            // run, and the arguments to run with the jar file
            HadoopJob hadoopJob = HadoopJob.newBuilder()
            .setMainJarFileUri("gs://" + bucketName + "/testInvertedIndex/InvertedIndex.jar")
            .addArgs("gs://" + bucketName + "/testInvertedIndex/input/")
            .addArgs("gs://" + bucketName + "/testInvertedIndex/output/")
            .build();

            // Configure the Job to be submitted. This will be sent to the
            // cluster to run the job
            Job job = Job.newBuilder()
            .setPlacement(jobPlacement)
            .setHadoopJob(hadoopJob)
            .build();

            // Submit an asynchronous request to execute the job.
            OperationFuture<Job, JobMetadata> submitJobAsOperationAsyncRequest =
            jobControllerClient.submitJobAsOperationAsync(projectId, region, job);

            // Wait for a response from GCP
            Job response = submitJobAsOperationAsyncRequest.get();

            // Get the file containing the inverted indices and store its Blobid
            BlobId blobId = BlobId.of(bucketName, "testInvertedIndex/output/part-r-00000");

            // Store the content of the file in a byte array
            byte[] content = storage.readAllBytes(blobId);

            // Convert the byte array into a string
            String contentString = new String(content, UTF_8);

            // Print the content of the output from GCP
            //System.out.println(contentString);

            if (contentString.isEmpty()){
                
            } else { 
                jPanel2.setVisible(false);
                jPanel1.setVisible(true);
                searchButton.setVisible(true);
                searchText.setVisible(true);
                topNText.setVisible(true);
                topNButton.setVisible(true);
                jScrollPane2.setVisible(true);
                result.setVisible(true);
                searchLabel.setVisible(true);
                topNlabel.setVisible(true);
                title1.setText("Inverted Indices constructed successfully!");
                title2.setText("Please choose one of the actions below to perform."); 
            }
                /*
            // Variable to test if deletion was successful
            boolean deleted = false;

            // Get all of the blobs with this prefix
            Iterable<Blob> blobs = storage.list(bucketName, Storage.BlobListOption.prefix("testInvertedIndex/output/")).iterateAll();

            // For all blobs, delete the blob and print if deletion was successful
            for (Blob blob : blobs) {
                deleted = storage.delete(blob.getBlobId());
                if (deleted) {
                    System.out.println("Blob successfully deleted!");
                } else {
                    System.out.println("Error deleting blob.");
                }
            } */
        } catch (Exception e){
            System.out.println("Error! Exception: " + e); 
        } 
    }//GEN-LAST:event_invertIndicesBtnActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String term = searchText.getText();
        if (term.isEmpty()){
            
        } else {
            result.setText("Beginning search for the term " + term + " ...");
            searchText.setText("");
            try {

                // This authenticates the credentials, then you can use this
                // variable for all credential authentications
                GoogleCredentials googleCreds = GoogleCredentials.fromStream(
                    new FileInputStream(credentials))
                .createScoped(Lists.newArrayList("https://www.googleapis.com/auth/cloud-platform"));

                // Verify that credentials were accepted
                //System.out.println("Google Credentials set!");

                // This authenticates your credentials to use storage. Storage is
                // used to access any files stored in the bucket in the cluster
                Storage storage = StorageOptions.newBuilder()
                    .setCredentials(googleCreds)
                    .build()
                    .getService();

                // Verify that storage credentials were accepted
                //System.out.println("Storage Credentials accepted!");

                // Configure JobControllerSettings to customize credentials. This
                // allows you to access the cluster
                JobControllerSettings jobControllerSettings = JobControllerSettings
                    .newBuilder()
                    .setEndpoint(endpoint)
                    .setCredentialsProvider(FixedCredentialsProvider.create(googleCreds))
                    .build();

                // Verify that job controller settings credentials were accepted
                System.out.println("Job Controller Settings Credentials accepted!");

                // Create the JobControllerClient with the previously set
                // jobControllerSettings
                JobControllerClient jobControllerClient = JobControllerClient
                    .create(jobControllerSettings);

                // Configure the cluster placement for the job. clusterName is
                // the name of the cluster you are accessing
                JobPlacement jobPlacement = JobPlacement.newBuilder()
                    .setClusterName(clusterName)
                    .build();

                // Configure the Hadoop Job settings. This is to specify the job
                // type and where you will set your main class, add a jar file to
                // run, and the arguments to run with the jar file
                HadoopJob hadoopJob = HadoopJob.newBuilder()
                    .setMainJarFileUri("gs://" + bucketName + "/testInvertedIndex/Search.jar")
                    .addArgs(term)
                    .addArgs("gs://" + bucketName + "/testInvertedIndex/output/")
                    .addArgs("gs://" + bucketName + "/testInvertedIndex/output1/")
                    .build();

                // Configure the Job to be submitted. This will be sent to the
                // cluster to run the job
                Job job = Job.newBuilder()
                    .setPlacement(jobPlacement)
                    .setHadoopJob(hadoopJob)
                    .build();

                // Submit an asynchronous request to execute the job.
                OperationFuture<Job, JobMetadata> submitJobAsOperationAsyncRequest =
                    jobControllerClient.submitJobAsOperationAsync(projectId, region, job);

                // Wait for a response from GCP
                Job response = submitJobAsOperationAsyncRequest.get();

                // Get the file containing the inverted indices and store its Blobid
                BlobId blobId = BlobId.of(bucketName, "testInvertedIndex/output1/part-r-00000");

                // Store the content of the file in a byte array
                byte[] content = storage.readAllBytes(blobId);

                // Convert the byte array into a string
                String contentString = new String(content, UTF_8);

                if (contentString.isEmpty()){
                    result.setText("There are no terms that match your search. Please try again.");
                } else {
                    result.setText(contentString);
                }

                // Print the content of the output from GCP
                //System.out.println(contentString);
                // Variable to test if deletion was successful
                boolean deleted = false;

                // Get all of the blobs with this prefix
                Iterable<Blob> blobs = storage.list(bucketName, Storage.BlobListOption.prefix("testInvertedIndex/output1/")).iterateAll();

                // For all blobs, delete the blob and print if deletion was successful
                for (Blob blob : blobs) {
                    deleted = storage.delete(blob.getBlobId());
                    if (deleted) {
                        System.out.println("Blob successfully deleted!");
                    } else {
                        System.out.println("Error deleting blob.");
                    }
                }


            } catch (Exception e){
                System.out.println("Error! Exception: " + e); 
            } 
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void topNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topNButtonActionPerformed
        // TODO add your handling code here:
        String topN = topNText.getText();
        if (topN.isEmpty() || !topN.matches("[0-9]+")){
            result.setText("Must enter a valid number");
        } else {
            result.setText("Determing top  " + topN + " results...");
            topNText.setText("");
            try {

                // This authenticates the credentials, then you can use this
                // variable for all credential authentications
                GoogleCredentials googleCreds = GoogleCredentials.fromStream(
                    new FileInputStream(credentials))
                .createScoped(Lists.newArrayList("https://www.googleapis.com/auth/cloud-platform"));

                // Verify that credentials were accepted
                //System.out.println("Google Credentials set!");

                // This authenticates your credentials to use storage. Storage is
                // used to access any files stored in the bucket in the cluster
                Storage storage = StorageOptions.newBuilder()
                    .setCredentials(googleCreds)
                    .build()
                    .getService();

                // Verify that storage credentials were accepted
                //System.out.println("Storage Credentials accepted!");

                // Configure JobControllerSettings to customize credentials. This
                // allows you to access the cluster
                JobControllerSettings jobControllerSettings = JobControllerSettings
                    .newBuilder()
                    .setEndpoint(endpoint)
                    .setCredentialsProvider(FixedCredentialsProvider.create(googleCreds))
                    .build();

                // Verify that job controller settings credentials were accepted
                System.out.println("Job Controller Settings Credentials accepted!");

                // Create the JobControllerClient with the previously set
                // jobControllerSettings
                JobControllerClient jobControllerClient = JobControllerClient
                    .create(jobControllerSettings);

                // Configure the cluster placement for the job. clusterName is
                // the name of the cluster you are accessing
                JobPlacement jobPlacement = JobPlacement.newBuilder()
                    .setClusterName(clusterName)
                    .build();

                // Configure the Hadoop Job settings. This is to specify the job
                // type and where you will set your main class, add a jar file to
                // run, and the arguments to run with the jar file
                HadoopJob hadoopJob = HadoopJob.newBuilder()
                    .setMainJarFileUri("gs://" + bucketName + "/testInvertedIndex/TopN.jar")
                    .addArgs(topN)
                    .addArgs("gs://" + bucketName + "/testInvertedIndex/output/")
                    .addArgs("gs://" + bucketName + "/testInvertedIndex/output1/")
                    .build();

                // Configure the Job to be submitted. This will be sent to the
                // cluster to run the job
                Job job = Job.newBuilder()
                    .setPlacement(jobPlacement)
                    .setHadoopJob(hadoopJob)
                    .build();

                // Submit an asynchronous request to execute the job.
                OperationFuture<Job, JobMetadata> submitJobAsOperationAsyncRequest =
                    jobControllerClient.submitJobAsOperationAsync(projectId, region, job);

                // Wait for a response from GCP
                Job response = submitJobAsOperationAsyncRequest.get();

                // Get the file containing the inverted indices and store its Blobid
                BlobId blobId = BlobId.of(bucketName, "testInvertedIndex/output1/part-r-00000");

                // Store the content of the file in a byte array
                byte[] content = storage.readAllBytes(blobId);

                // Convert the byte array into a string
                String contentString = new String(content, UTF_8);

                if (contentString.isEmpty()){
                    result.setText("There was an error calculating Top N terms. Please try again.");
                } else {
                    result.setText(contentString);
                }

                // Print the content of the output from GCP
                //System.out.println(contentString);
                // Variable to test if deletion was successful
                boolean deleted = false;

                // Get all of the blobs with this prefix
                Iterable<Blob> blobs = storage.list(bucketName, Storage.BlobListOption.prefix("testInvertedIndex/output1/")).iterateAll();

                // For all blobs, delete the blob and print if deletion was successful
                for (Blob blob : blobs) {
                    deleted = storage.delete(blob.getBlobId());
                    if (deleted) {
                        System.out.println("Blob successfully deleted!");
                    } else {
                        System.out.println("Error deleting blob.");
                    }
                }
                

            } catch (Exception e){
                System.out.println("Error! Exception: " + e); 
            } 
        }
    }//GEN-LAST:event_topNButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(projectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(projectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(projectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(projectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new projectUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel engineName;
    private javax.swing.JButton invertIndicesBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea result;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchText;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    private javax.swing.JButton topNButton;
    private javax.swing.JTextField topNText;
    private javax.swing.JLabel topNlabel;
    // End of variables declaration//GEN-END:variables
}
